import json
import random
from concurrent.futures import ThreadPoolExecutor

question_seeds = [
    '这段音频的场景是在什么地方？',
    '这个音频是在什么场景录制的？',
    '这段录音中的背景声音让人联想到什么样的环境或场所？',
    '分析音频中的声音线索，你能推测出这是在哪里？',
    '你能否根据音频里的声音特征，猜测音频环境是在什么地方？',
    '音频中出现的背景音以及其它线索音是否能指示这是在哪里？',
    '这段音频的音效会出现在什么样的场景？',
    '音频中的环境音效能让你想到什么地方？',
    '你能根据音频中的声音元素推测出这是在哪个地点录制的吗？',
    '听完这段音频，你觉得音频发生场所在什么样的环境中？',
    '从音频中的声音细节出发，你能猜测这段音频是在什么场景下录制的吗？',
    '音频中出现的声音特征能否帮助你定位录音的具体场所？',
    '音频中的声音效果能否让你联想到某个特定的场景？',
    '结合音频中的声音特征，你能推测这段音频是在什么地方录制的吗？',
    '通过分析音频中的声音线索，你觉得这段录音的地点可能是哪里？',
    '从音频中的背景声分析，你能猜测出录音的环境是什么样的吗？',
    '你觉得这段音频的录音地点具体是哪一种场所？',
    '音频中的特定声音和背景音能帮助你推测这段录音的场景吗？',
    '你能否根据音频中的回声和混响判断出音频的环境是在什么地方？',
    '音频中捕捉到的声音元素让你联想到什么样的环境或场所？',
    '听完音频后，你能推断出录音的具体场景吗？',
    '从音频中出现的声音线索来看，你觉得这段录音的场景是什么样的？',
    '结合音频中的背景声音，你能推测出录音的场所吗？',
    '通过分析音频中的特定声音线索，你觉得这段录音的场景可能是在哪里？',
    '你能否根据音频中的音效内容和背景音，推测出录音的具体场所？',
    '音频中的各种声音特征能指明这段录音的环境是在什么地方吗？',
    '从音频中的环境音和背景声来看，你觉得这段录音是在什么样的场所进行的？',
    '结合音频中的各种声音线索，你能推测这段音频的录制地点是什么样的吗？',
    '通过音频中的声音线索和环境音效，你能猜测录音的地点是哪里吗？',
    '根据音频中的声音特征，你能说出这段录音的环境是在什么地方吗？'
]

# 修改后的 answer_seeds
answer_seeds = [
    '根据音频的内容和其中捕捉到的声音特征，这段音频的场景很可能是在',
    '根据音频中的背景音和物体互动音，这段音频的地点可能是在',
    '通过分析音频中的各种声音元素，这段录音很可能是在',
    '从音频中的背景声和环境音效来看，这段音频的录制地点可能是在',
    '鉴于音频中捕捉到的特定声音，这段录音的场景很有可能是在',
    '结合音频中听到的声音特征，这段音频的场景可能是在',
    '通过音频中的环境声音和背景音效，可以推测这段录音是在',
    '音频中的声音线索表明，这段录音很可能是在',
    '从音频中识别出的背景音来看，这段音频的场景可能是在',
    '通过对音频中的声音特征进行分析，可以推断这段录音的地点是在',
    '分析音频中的背景声音，我们可以猜测这段音频是在',
    '从音频中的声效细节来看，这段音频很可能录制于',
    '通过音频中的声音线索，可以推测这段录音的场景是',
    '根据音频捕捉到的背景音效，这段录音的地点可能是在',
    '从音频中的环境音效分析，这段音频的录制场所可能是在',
    '通过音频中的各种声音特征，我们可以推测这段录音的地点是在',
    '从音频的声音内容分析，这段录音很可能是在',
    '结合音频中的背景声音，可以推断这段录音的场景是在',
    '根据音频中的环境音效，这段录音的地点很可能是在',
    '从音频捕捉到的各种声音特征来看，这段录音可能是在',
    '根据音频中的声音细节，我们可以推测录音地点可能是在',
    '通过音频中的环境噪音和其他声音特征，可以推断这段录音是在',
    '音频中的背景音效提示，这段录音的场景很可能是在',
    '从音频中的特定声音元素来看，这段录音的地点可能是在',
    '通过音频捕捉到的声音，可以推测这段录音是在',
    '结合音频中的音效内容，可以推断录音地点是在',
    '根据音频中的声音线索，这段音频的场景可能是在',
    '通过音频中的背景噪音，我们可以猜测这段录音是在',
    '音频中的声音提示，这段录音的场景可能是在',
    '根据音频中的各种声音特征，这段音频的场景很可能是在',
    '通过仔细分析音频中的背景声音和环境音效，可以推测这段录音是在',
    '从音频中的不同声音元素和背景噪音来看，这段录音的地点可能是在',
    '结合音频中的背景音效和物体互动音，可以推测这段音频的录制地点是在',
    '根据音频捕捉到的各种声音特征，这段音频的场景可能是在',
    '通过音频中的环境音效和特定声音元素，可以推测这段录音的场所是在',
    '从音频中的声音特征和背景音效分析，这段录音的地点很可能是在',
    '根据音频内容中的背景噪音和环境声音，我们可以推测这段录音是在',
    '通过音频中的各种声音线索和背景噪音，这段音频的场景可能是在',
    '从音频中捕捉到的背景声音和其他声音特征来看，这段录音的场景可能是在',
    '结合音频中的特定声音和背景音效，可以推断这段录音的地点是在',
    '通过分析音频中的不同声音元素和环境噪音，可以推测这段录音是在',
    '从音频内容中的背景声和环境音效来看，这段录音的场景可能是在'
]

# 英文到中文的翻译字典
translation_dict = {
    'home': ['家里', '在家', '家中', '家庭住宅内', '家里边'],
    'metro_station': ['地铁站', '地铁附近', '地铁站内', '地铁口', '地铁入口'],
    'office': ['办公室里面', '公司内', '工作地点', '办公室内', '办公场所'],
    'bus': ['公交车附近', '巴士附近', '公共汽车附近', '公交车附近', '大巴附近'],
    'beach': ['海滩边', '沙滩上', '海边', '海岸边', '海滩上'],
    'city_center': ['市中心', '市区中心', '城市中心', '闹市区', '中心城区'],
    'tram': ['有轨电车附近', '电车站', '有轨电车站', '电车上', '电车沿线'],
    'cafe/restaurant': ['咖啡馆/餐馆内', '咖啡馆里', '餐馆里', '餐饮馆内', '咖啡店'],
    'residential_area': ['居民区', '住宅区', '居住区', '小区内', '居民小区边上'],
    'train': ['火车附近', '火车站', '火车车厢', '列车上', '铁路边'],
    'library': ['图书馆内', '书馆内', '图书馆里', '藏书楼', '阅览室'],
    'forest_path': ['林间小道', '森林小径', '林中小路', '树林小道', '林间道路'],
    'car': ['汽车附近', '车旁边', '车辆旁', '车里', '车外'],
    'park': ['公园周边', '公园里', '园区内', '绿地里', '游乐园里'],
    'grocery_store': ['杂货店里', '便利店内', '超市里', '食品店内', '杂货铺']
}


def process_line(line):
  parts = line.strip().split('\t')
  audio_file, cls_res, _ = parts[:3]

  # 从 translation_dict 中随机选择一个翻译
  translated_cls_res_options = translation_dict.get(cls_res, [cls_res])
  translated_cls_res = random.choice(translated_cls_res_options)

  if random.random() < 0.6:
    answer_seed = ''
  else:
    answer_seed = random.choice(answer_seeds)

  gpt_value = f'{answer_seed}{translated_cls_res}。'

  return {
      "audio": audio_file.replace('audio/', 'TUT/'),
      "conversations": [
          {
              "from": "human",
              "value": random.choice(question_seeds),
              "input_modality": "audio"
          },
          {
              "from": "gpt",
              "value": gpt_value,
              "output_modality": "text"
          }
      ]
  }


def txt_to_json(txt_file_path, json_file_path):
  data = []

  with open(txt_file_path, 'r', encoding='utf-8') as file:
    lines = file.readlines()

  # 使用 ThreadPoolExecutor 进行多线程处理，线程数为9
  with ThreadPoolExecutor(max_workers=8) as executor:
    futures = [executor.submit(process_line, line) for line in lines]
    for future in futures:
      data.append(future.result())

  with open(json_file_path, 'w', encoding='utf-8') as json_file:
    # json.dump(data, json_file, ensure_ascii=False, indent=4)
    json.dump(data, json_file, ensure_ascii=False, separators=(',', ':'))


if __name__ == '__main__':
  txt_to_json('meta.txt', 'json/TUT_Acoustic_scenes_ch.json')
